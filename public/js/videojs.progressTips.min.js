videojs.findPosition = function(el) {
      var box, docEl, body, clientLeft, scrollLeft, left, clientTop, scrollTop, top;
    
      if (el.getBoundingClientRect && el.parentNode) {
        box = el.getBoundingClientRect();
      }
    
      if (!box) {
        return {
          left: 0,
          top: 0
        };
      }
    
      docEl = document.documentElement;
      body = document.body;
    
      clientLeft = docEl.clientLeft || body.clientLeft || 0;
      scrollLeft = window.pageXOffset || body.scrollLeft;
      left = box.left + scrollLeft - clientLeft;
    
      clientTop = docEl.clientTop || body.clientTop || 0;
      scrollTop = window.pageYOffset || body.scrollTop;
      top = box.top + scrollTop - clientTop;
    
      // Android sometimes returns slightly off decimal values, so need to round
      return {
        left: videojs.round(left),
        top: videojs.round(top)
      };
    };
    videojs.Slider.prototype.calculateDistance = function(event){
      var el, box, boxX, boxY, boxW, boxH, handle, pageX, pageY;
    
      el = this.el();
      box = videojs.findPosition(el);
      boxW = boxH = el.offsetWidth;
      handle = this.handle;
    
      if (this.options()['vertical']) {
        boxY = box.top;
    
        if (event.changedTouches) {
          pageY = event.changedTouches[0].pageY;
        } else {
          pageY = event.pageY;
        }
    
        if (handle) {
          var handleH = handle.el().offsetHeight;
          // Adjusted X and Width, so handle doesn't go outside the bar
          boxY = boxY + (handleH / 2);
          boxH = boxH - handleH;
        }
    
        // Percent that the click is through the adjusted area
        return Math.max(0, Math.min(1, ((boxY - pageY) + boxH) / boxH));
    
      } else {
        boxX = box.left;
    
        if (event.changedTouches) {
          pageX = event.changedTouches[0].pageX;
        } else {
          pageX = event.pageX;
        }
    
        if (handle) {
          var handleW = handle.el().offsetWidth;
    
          // Adjusted X and Width, so handle doesn't go outside the bar
          boxX = boxX + (handleW / 2);
          boxW = boxW - handleW;
        }
    
        // Percent that the click is through the adjusted area
        return Math.max(0, Math.min(1, (pageX - boxX) / boxW));
      }
    };
videojs.plugin('progressTips', function(options) {
        var init;
        init = function() {
          var player;
          if (this.Ia !== "Html5") {
            return;
          }
          player = this;
          $(".vjs-progress-control").after($("      <div id='vjs-tip'>      <div id='vjs-tip-arrow'></div>      <div id='vjs-tip-inner'></div>      </div>    "));
          $(".vjs-progress-control").on("mousemove", function(event) {
            var barHeight, minutes, seconds, seekBar, timeInSeconds;
            seekBar = player.controlBar.progressControl.seekBar;
            timeInSeconds = seekBar.calculateDistance(event) * player.duration();
            if (timeInSeconds === player.duration()) {
              timeInSeconds = timeInSeconds - 0.1;
            }
            minutes = Math.floor(timeInSeconds / 60);
            seconds = Math.floor(timeInSeconds - minutes * 60);
            if (seconds < 10) {
              seconds = "0" + seconds;
            }
            $('#vjs-tip-inner').html(toHHMMSS(timeInSeconds));
            barHeight = $('.vjs-control-bar').height();
            $("#vjs-tip").css("top", "" + (event.pageY - $(this).offset().top - barHeight - 15) + "px").css("left", "" + (event.pageX - $(this).offset().left - 32) + "px").css("visibility", "visible");
            return;
          });
          $(".vjs-progress-control, .vjs-play-control").on("mouseout", function() {
            $("#vjs-tip").css("visibility", "hidden");
          });
        };
        init.call(this);
      });
function toHHMMSS(s) {
    var sec_num = parseInt(s, 10); // don't forget the second param
    var hours   = Math.floor(sec_num / 3600);
    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
    var seconds = sec_num - (hours * 3600) - (minutes * 60);

    if (hours   < 10) {hours   = "0"+hours;}
    if (minutes < 10) {minutes = "0"+minutes;}
    if (seconds < 10) {seconds = "0"+seconds;}
    var time = hours+':'+minutes+':'+seconds;
    return time;
}